{"version":3,"file":"static/js/672.18abe878.chunk.js","mappings":"gKACA,GAAgB,QAAU,yBAAyB,WAAa,4BAA4B,SAAW,2B,mBCwBvG,EAtBmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,GAAKA,EAAAA,OAAS,UACrC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECHA,EAJgB,SAACN,GACb,OAAO,gBAAKG,UAAWC,EAAAA,QAAU,SAAEJ,EAAMO,SAC7C,E,6BCUMC,GAAqBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,yBAAjBD,EATJ,SAACT,GACpB,OACI,kBAAMW,SAAUX,EAAMY,aAAa,WAC/B,SAACC,EAAA,EAAK,CAACP,KAAM,cAAeQ,UAAW,WAAYC,SAAU,CAACC,EAAAA,IAASC,EAAAA,EAAAA,IAAiB,KAAIC,EAAAA,EAAAA,IAAiB,IAAKC,YAAY,wBAC9H,uCAGZ,IA4BA,EAxBgB,SAACnB,GACb,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAU,CAACnB,KAAMmB,EAAOnB,KAAsBJ,GAAIuB,EAAOvB,IAAtBuB,EAAOvB,GAAqB,IAC7GwB,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAErB,QAAoBL,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,GAAgB,IAKlG,OACI,iBAAKC,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,WAAa,SACxBkB,KAEL,iBAAKnB,UAAWC,EAAAA,SAAW,WACvB,yBAAMsB,KACN,0BACI,SAAClB,EAAkB,CAACG,SAXd,SAACkB,GACnB7B,EAAM8B,YAAYD,EAAOE,YAC7B,WAcJ,E,oBC1BA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KARkB,SAACb,GACnB,MAAM,CACFC,YAAaD,EAAMC,YACnBa,OAAQd,EAAMe,KAAKD,OAE3B,GAIQ,CAACJ,YAAAA,EAAAA,IACLM,EAAAA,EAHJ,CAIEC,E,kJCZEC,EAA6B,SAAClB,GAAK,MAAM,CACzCc,OAAQd,EAAMe,KAAKD,OACtB,EAEYE,EAAmB,SAACG,GAAe,IACtCC,EAAiB,qGAIlB,OAJkB,8BACnB,WACI,OAAKC,KAAKzC,MAAMkC,QACT,SAACK,GAAS,UAAIE,KAAKzC,SADK,SAAC,KAAQ,CAACK,GAAG,UAEhD,KAAC,EAJkB,CAASqC,EAAAA,WAShC,OAFqCT,EAAAA,EAAAA,IAAQK,EAARL,CAAoCO,EAG7E,C,wGCpBO,IAAMxB,EAAW,SAAA2B,GACpB,IAAGA,EACH,MAAO,mBACX,EAEa1B,EAAmB,SAAC2B,GAAS,OAAK,SAAAD,GAC3C,GAAIA,EAAME,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAS,WAEnE,CAAC,EACY1B,EAAmB,SAAC4B,GAAS,OAAK,SAAAH,GAC3C,GAAIA,EAAME,OAASC,EAAW,MAAM,iBAAN,OAAwBA,EAAS,WAEnE,CAAC,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js","utils/validators.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gzKYt\",\"dialogItem\":\"Dialogs_dialogItem__nD5wg\",\"messages\":\"Dialogs_messages__J31IP\"};","import { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + '' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*const DialogItems = (props) => {\r\n    return (\r\n            <div className={s.dialogborder}>\r\n                <img className={s.borderimg} src='https://www.kino-teatr.ru/news/15865/143634.jpg' />\r\n                <div>\r\n                    <div className={s.dlgname}><b>{props.name} {props.secondname}</b></div>\r\n                    <div className={s.message}>{props.text}</div>\r\n                </div>\r\n                <p className={s.dialogdate}>{props.date}</p>\r\n            </div>\r\n    )\r\n}*/\r\n\r\nexport default DialogItem;","import s from '../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator, minLengthCreator } from '../../utils/validators'\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'MessageBody'} component={'textarea'} validate={[required,maxLengthCreator(50),minLengthCreator(1)]} placeholder='Enter your message'></Field>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMesageReduxForm = reduxForm({form: 'dialogsAddMessageForm'})(AddMessageForm);\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />)\r\n    let messageElements = state.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />)\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.MessageBody);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <AddMesageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { sendMessage } from '../../Redux/dialogReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, \r\n        {sendMessage}),\r\n    withAuthRedirect,\r\n)(Dialogs);","import { Component } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n//HOC HIGH ORDER COMPONENT оборачивает компоненту\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n            return <Component{...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","export const required = value => {\r\n    if(value) return undefined;\r\n    return \"field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\nexport const minLengthCreator = (minLength) => value => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`\r\n    return undefined;\r\n}\r\n"],"names":["props","path","id","className","s","to","name","message","AddMesageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","required","maxLengthCreator","minLengthCreator","placeholder","state","dialogsPage","dialogElements","dialogs","map","dialog","messageElements","messages","m","values","sendMessage","MessageBody","compose","connect","isAuth","auth","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","Component","RedirectComponent","this","React","value","maxLength","length","minLength"],"sourceRoot":""}